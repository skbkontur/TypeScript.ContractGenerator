using System;
using System.Linq;
using System.Reflection;

using SkbKontur.TypeScript.ContractGenerator;
using SkbKontur.TypeScript.ContractGenerator.Abstractions;
using SkbKontur.TypeScript.ContractGenerator.Extensions;
using SkbKontur.TypeScript.ContractGenerator.Internals;
using SkbKontur.TypeScript.ContractGenerator.TypeBuilders;

namespace AspNetCoreExample.Generator
{
    public class ApiControllerTypeBuildingContext : TypeBuildingContext
    {
        public ApiControllerTypeBuildingContext(TypeScriptUnit unit, ITypeInfo type)
            : base(unit, type)
        {
        }

        public static bool Accept(ITypeInfo type)
        {
            var test0 = SkbKontur.TypeScript.ContractGenerator.Roslyn.TypeInfoRewriter.Types[0];
            var test1 = SkbKontur.TypeScript.ContractGenerator.Roslyn.TypeInfoRewriter.Types[1];
            var test2 = SkbKontur.TypeScript.ContractGenerator.Roslyn.TypeInfoRewriter.Types[2];
            var test3 = SkbKontur.TypeScript.ContractGenerator.Roslyn.TypeInfoRewriter.Types[3];
            var test4 = SkbKontur.TypeScript.ContractGenerator.Roslyn.TypeInfoRewriter.Types[4];
            var test5 = SkbKontur.TypeScript.ContractGenerator.Roslyn.TypeInfoRewriter.Types[5];

            return SkbKontur.TypeScript.ContractGenerator.Roslyn.TypeInfoRewriter.Types[6].IsAssignableFrom(type);
        }

        protected TypeLocation GetApiBase(ITypeInfo controllerType)
        {
            var apiBaseName = GetApiBaseName(controllerType);
            return new TypeLocation
                {
                    Name = apiBaseName,
                    Location = $"apiBase/{apiBaseName}",
                };
        }

        private string GetApiBaseName(ITypeInfo controllerType)
        {
            if (IsUserScopedApi(controllerType))
                return "UserApiBase";
            return "ApiBase";
        }

        protected ITypeInfo ResolveReturnType(ITypeInfo typeInfo)
        {
            if (typeInfo.IsGenericType)
            {
                var genericTypeDefinition = typeInfo.GetGenericTypeDefinition();
                if (genericTypeDefinition.Equals(SkbKontur.TypeScript.ContractGenerator.Roslyn.TypeInfoRewriter.Types[7]) || genericTypeDefinition.Equals(SkbKontur.TypeScript.ContractGenerator.Roslyn.TypeInfoRewriter.Types[8]))
                    return ResolveReturnType(typeInfo.GetGenericArguments()[0]);
            }

            if (typeInfo.Equals(SkbKontur.TypeScript.ContractGenerator.Roslyn.TypeInfoRewriter.Types[9]))
                return SkbKontur.TypeScript.ContractGenerator.Roslyn.TypeInfoRewriter.Types[10];
            if (typeInfo.Equals(SkbKontur.TypeScript.ContractGenerator.Roslyn.TypeInfoRewriter.Types[11]))
                return SkbKontur.TypeScript.ContractGenerator.Roslyn.TypeInfoRewriter.Types[12];
            return typeInfo;
        }

        protected string ResolveBaseApiMethod(IMethodInfo methodInfo)
        {
            if (methodInfo.GetAttributes(SkbKontur.TypeScript.ContractGenerator.Roslyn.TypeInfoRewriter.Types[13]).Any())
                return "Get";

            if (methodInfo.GetAttributes(SkbKontur.TypeScript.ContractGenerator.Roslyn.TypeInfoRewriter.Types[14]).Any())
                return "Post";

            if (methodInfo.GetAttributes(SkbKontur.TypeScript.ContractGenerator.Roslyn.TypeInfoRewriter.Types[15]).Any())
                return "Put";

            if (methodInfo.GetAttributes(SkbKontur.TypeScript.ContractGenerator.Roslyn.TypeInfoRewriter.Types[16]).Any())
                return "Delete";

            throw new NotSupportedException($"Unresolved http verb for method {methodInfo.Name} at controller {methodInfo.DeclaringType?.Name}");
        }

        protected string BuildRoute(ITypeInfo controllerType, IMethodInfo methodInfo)
        {
            var routeTemplate = methodInfo.GetAttributes(false)
                                          .Select(x => x.AttributeData.TryGetValue("Template", out var value) ? (string)value : null)
                                          .SingleOrDefault(x => !string.IsNullOrEmpty(x));
            return AppendRoutePrefix(routeTemplate, controllerType);
        }

        protected bool PassParameterToCall(IParameterInfo parameterInfo, ITypeInfo controllerType)
        {
            if (IsUserScopedApi(controllerType) && parameterInfo.Name == "userId")
                return false;
            return true;
        }

        protected IParameterInfo[] GetQueryParameters(IParameterInfo[] parameters, ITypeInfo controllerType)
        {
            return parameters.Where(x => PassParameterToCall(x, controllerType) && !x.GetAttributes(SkbKontur.TypeScript.ContractGenerator.Roslyn.TypeInfoRewriter.Types[17]).Any()).ToArray();
        }

        protected IParameterInfo GetBody(IParameterInfo[] parameters, ITypeInfo controllerType)
        {
            return parameters.SingleOrDefault(x => PassParameterToCall(x, controllerType) && x.GetAttributes(SkbKontur.TypeScript.ContractGenerator.Roslyn.TypeInfoRewriter.Types[18]).Any());
        }

        protected IMethodInfo[] GetMethodsToImplement(ITypeInfo controllerType)
        {
            return controllerType.GetMethods(BindingFlags.Instance | BindingFlags.Public)
                                 .Where(m => !((MethodWrapper)m).Method.IsSpecialName)
                                 .Where(x => x.DeclaringType.Equals(controllerType))
                                 .ToArray();
        }

        private string AppendRoutePrefix(string routeTemplate, ITypeInfo controllerType)
        {
            var routeAttribute = controllerType.GetAttributes(SkbKontur.TypeScript.ContractGenerator.Roslyn.TypeInfoRewriter.Types[19]).SingleOrDefault();
            var fullRoute = (routeAttribute == null ? "" : routeAttribute.AttributeData["Template"] + "/") + routeTemplate;
            if (IsUserScopedApi(controllerType))
                return fullRoute.Substring("v1/user/{userId}/".Length);
            return fullRoute.Substring("v1/".Length);
        }

        private bool IsUserScopedApi(ITypeInfo controller)
        {
            var route = controller.GetAttributes(SkbKontur.TypeScript.ContractGenerator.Roslyn.TypeInfoRewriter.Types[20]).SingleOrDefault();
            var template = (string)route?.AttributeData["Template"];
            return template?.StartsWith("v1/user/{userId}") ?? false;
        }
    }
}